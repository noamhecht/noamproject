{"id":"node_modules/draft-js/lib/CharacterMetadata.js","dependencies":[{"name":"C:\\Users\\noamh\\noamproject\\frontend\\package.json","includedInParent":true,"mtime":1590303462313},{"name":"C:\\Users\\noamh\\noamproject\\frontend\\.babelrc","includedInParent":true,"mtime":1590303416264},{"name":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\package.json","includedInParent":true,"mtime":1590303448001},{"name":"immutable","loc":{"line":22,"column":23},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\CharacterMetadata.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\immutable\\dist\\immutable.js"}],"generated":{"js":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule CharacterMetadata\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar _require = require('immutable'),\r\n    Map = _require.Map,\r\n    OrderedSet = _require.OrderedSet,\r\n    Record = _require.Record;\r\n\r\n// Immutable.map is typed such that the value for every key in the map\r\n// must be the same type\r\n\r\n\r\nvar EMPTY_SET = OrderedSet();\r\n\r\nvar defaultRecord = {\r\n  style: EMPTY_SET,\r\n  entity: null\r\n};\r\n\r\nvar CharacterMetadataRecord = Record(defaultRecord);\r\n\r\nvar CharacterMetadata = function (_CharacterMetadataRec) {\r\n  _inherits(CharacterMetadata, _CharacterMetadataRec);\r\n\r\n  function CharacterMetadata() {\r\n    _classCallCheck(this, CharacterMetadata);\r\n\r\n    return _possibleConstructorReturn(this, _CharacterMetadataRec.apply(this, arguments));\r\n  }\r\n\r\n  CharacterMetadata.prototype.getStyle = function getStyle() {\r\n    return this.get('style');\r\n  };\r\n\r\n  CharacterMetadata.prototype.getEntity = function getEntity() {\r\n    return this.get('entity');\r\n  };\r\n\r\n  CharacterMetadata.prototype.hasStyle = function hasStyle(style) {\r\n    return this.getStyle().includes(style);\r\n  };\r\n\r\n  CharacterMetadata.applyStyle = function applyStyle(record, style) {\r\n    var withStyle = record.set('style', record.getStyle().add(style));\r\n    return CharacterMetadata.create(withStyle);\r\n  };\r\n\r\n  CharacterMetadata.removeStyle = function removeStyle(record, style) {\r\n    var withoutStyle = record.set('style', record.getStyle().remove(style));\r\n    return CharacterMetadata.create(withoutStyle);\r\n  };\r\n\r\n  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\r\n    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);\r\n    return CharacterMetadata.create(withEntity);\r\n  };\r\n\r\n  /**\r\n   * Use this function instead of the `CharacterMetadata` constructor.\r\n   * Since most content generally uses only a very small number of\r\n   * style/entity permutations, we can reuse these objects as often as\r\n   * possible.\r\n   */\r\n\r\n\r\n  CharacterMetadata.create = function create(config) {\r\n    if (!config) {\r\n      return EMPTY;\r\n    }\r\n\r\n    var defaultConfig = {\r\n      style: EMPTY_SET,\r\n      entity: null\r\n    };\r\n\r\n    // Fill in unspecified properties, if necessary.\r\n    var configMap = Map(defaultConfig).merge(config);\r\n\r\n    var existing = pool.get(configMap);\r\n    if (existing) {\r\n      return existing;\r\n    }\r\n\r\n    var newCharacter = new CharacterMetadata(configMap);\r\n    pool = pool.set(configMap, newCharacter);\r\n    return newCharacter;\r\n  };\r\n\r\n  return CharacterMetadata;\r\n}(CharacterMetadataRecord);\r\n\r\nvar EMPTY = new CharacterMetadata();\r\nvar pool = Map([[Map(defaultRecord), EMPTY]]);\r\n\r\nCharacterMetadata.EMPTY = EMPTY;\r\n\r\nmodule.exports = CharacterMetadata;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/draft-js/lib/CharacterMetadata.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}}],"sources":{"node_modules/draft-js/lib/CharacterMetadata.js":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule CharacterMetadata\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar _require = require('immutable'),\r\n    Map = _require.Map,\r\n    OrderedSet = _require.OrderedSet,\r\n    Record = _require.Record;\r\n\r\n// Immutable.map is typed such that the value for every key in the map\r\n// must be the same type\r\n\r\n\r\nvar EMPTY_SET = OrderedSet();\r\n\r\nvar defaultRecord = {\r\n  style: EMPTY_SET,\r\n  entity: null\r\n};\r\n\r\nvar CharacterMetadataRecord = Record(defaultRecord);\r\n\r\nvar CharacterMetadata = function (_CharacterMetadataRec) {\r\n  _inherits(CharacterMetadata, _CharacterMetadataRec);\r\n\r\n  function CharacterMetadata() {\r\n    _classCallCheck(this, CharacterMetadata);\r\n\r\n    return _possibleConstructorReturn(this, _CharacterMetadataRec.apply(this, arguments));\r\n  }\r\n\r\n  CharacterMetadata.prototype.getStyle = function getStyle() {\r\n    return this.get('style');\r\n  };\r\n\r\n  CharacterMetadata.prototype.getEntity = function getEntity() {\r\n    return this.get('entity');\r\n  };\r\n\r\n  CharacterMetadata.prototype.hasStyle = function hasStyle(style) {\r\n    return this.getStyle().includes(style);\r\n  };\r\n\r\n  CharacterMetadata.applyStyle = function applyStyle(record, style) {\r\n    var withStyle = record.set('style', record.getStyle().add(style));\r\n    return CharacterMetadata.create(withStyle);\r\n  };\r\n\r\n  CharacterMetadata.removeStyle = function removeStyle(record, style) {\r\n    var withoutStyle = record.set('style', record.getStyle().remove(style));\r\n    return CharacterMetadata.create(withoutStyle);\r\n  };\r\n\r\n  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\r\n    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);\r\n    return CharacterMetadata.create(withEntity);\r\n  };\r\n\r\n  /**\r\n   * Use this function instead of the `CharacterMetadata` constructor.\r\n   * Since most content generally uses only a very small number of\r\n   * style/entity permutations, we can reuse these objects as often as\r\n   * possible.\r\n   */\r\n\r\n\r\n  CharacterMetadata.create = function create(config) {\r\n    if (!config) {\r\n      return EMPTY;\r\n    }\r\n\r\n    var defaultConfig = {\r\n      style: EMPTY_SET,\r\n      entity: null\r\n    };\r\n\r\n    // Fill in unspecified properties, if necessary.\r\n    var configMap = Map(defaultConfig).merge(config);\r\n\r\n    var existing = pool.get(configMap);\r\n    if (existing) {\r\n      return existing;\r\n    }\r\n\r\n    var newCharacter = new CharacterMetadata(configMap);\r\n    pool = pool.set(configMap, newCharacter);\r\n    return newCharacter;\r\n  };\r\n\r\n  return CharacterMetadata;\r\n}(CharacterMetadataRecord);\r\n\r\nvar EMPTY = new CharacterMetadata();\r\nvar pool = Map([[Map(defaultRecord), EMPTY]]);\r\n\r\nCharacterMetadata.EMPTY = EMPTY;\r\n\r\nmodule.exports = CharacterMetadata;"},"lineCount":115}},"error":null,"hash":"07f8bf852c69e7147af1e45a72ec234e","cacheData":{"env":{}}}