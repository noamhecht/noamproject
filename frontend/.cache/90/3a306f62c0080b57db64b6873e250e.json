{"id":"node_modules/draft-js/lib/editOnPaste.js","dependencies":[{"name":"C:\\Users\\noamh\\noamproject\\frontend\\package.json","includedInParent":true,"mtime":1590303462313},{"name":"C:\\Users\\noamh\\noamproject\\frontend\\.babelrc","includedInParent":true,"mtime":1590303416264},{"name":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\package.json","includedInParent":true,"mtime":1590303448001},{"name":"./BlockMapBuilder","loc":{"line":16,"column":30},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\BlockMapBuilder.js"},{"name":"./CharacterMetadata","loc":{"line":17,"column":32},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\CharacterMetadata.js"},{"name":"fbjs/lib/DataTransfer","loc":{"line":18,"column":27},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\fbjs\\lib\\DataTransfer.js"},{"name":"./DraftModifier","loc":{"line":19,"column":28},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\DraftModifier.js"},{"name":"./DraftPasteProcessor","loc":{"line":20,"column":34},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\DraftPasteProcessor.js"},{"name":"./EditorState","loc":{"line":21,"column":26},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\EditorState.js"},{"name":"./RichTextEditorUtil","loc":{"line":22,"column":33},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\RichTextEditorUtil.js"},{"name":"./getEntityKeyForSelection","loc":{"line":24,"column":39},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\getEntityKeyForSelection.js"},{"name":"./getTextContentFromFiles","loc":{"line":25,"column":38},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\getTextContentFromFiles.js"},{"name":"./isEventHandled","loc":{"line":26,"column":29},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\isEventHandled.js"},{"name":"./splitTextIntoTextBlocks","loc":{"line":27,"column":38},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\editOnPaste.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\draft-js\\lib\\splitTextIntoTextBlocks.js"}],"generated":{"js":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnPaste\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nvar BlockMapBuilder = require('./BlockMapBuilder');\r\nvar CharacterMetadata = require('./CharacterMetadata');\r\nvar DataTransfer = require('fbjs/lib/DataTransfer');\r\nvar DraftModifier = require('./DraftModifier');\r\nvar DraftPasteProcessor = require('./DraftPasteProcessor');\r\nvar EditorState = require('./EditorState');\r\nvar RichTextEditorUtil = require('./RichTextEditorUtil');\r\n\r\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\r\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\r\nvar isEventHandled = require('./isEventHandled');\r\nvar splitTextIntoTextBlocks = require('./splitTextIntoTextBlocks');\r\n\r\n/**\r\n * Paste content.\r\n */\r\nfunction editOnPaste(editor, e) {\r\n  e.preventDefault();\r\n  var data = new DataTransfer(e.clipboardData);\r\n\r\n  // Get files, unless this is likely to be a string the user wants inline.\r\n  if (!data.isRichText()) {\r\n    var files = data.getFiles();\r\n    var defaultFileText = data.getText();\r\n    if (files.length > 0) {\r\n      // Allow customized paste handling for images, etc. Otherwise, fall\r\n      // through to insert text contents into the editor.\r\n      if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {\r\n        return;\r\n      }\r\n\r\n      getTextContentFromFiles(files, function ( /*string*/fileText) {\r\n        fileText = fileText || defaultFileText;\r\n        if (!fileText) {\r\n          return;\r\n        }\r\n\r\n        var editorState = editor._latestEditorState;\r\n        var blocks = splitTextIntoTextBlocks(fileText);\r\n        var character = CharacterMetadata.create({\r\n          style: editorState.getCurrentInlineStyle(),\r\n          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\r\n        });\r\n        var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\r\n\r\n        var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);\r\n        var fragment = BlockMapBuilder.createFromArray(text);\r\n\r\n        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\r\n\r\n        editor.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));\r\n      });\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  var textBlocks = [];\r\n  var text = data.getText();\r\n  var html = data.getHTML();\r\n  var editorState = editor._latestEditorState;\r\n\r\n  if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html, editorState))) {\r\n    return;\r\n  }\r\n\r\n  if (text) {\r\n    textBlocks = splitTextIntoTextBlocks(text);\r\n  }\r\n\r\n  if (!editor.props.stripPastedStyles) {\r\n    // If the text from the paste event is rich content that matches what we\r\n    // already have on the internal clipboard, assume that we should just use\r\n    // the clipboard fragment for the paste. This will allow us to preserve\r\n    // styling and entities, if any are present. Note that newlines are\r\n    // stripped during comparison -- this is because copy/paste within the\r\n    // editor in Firefox and IE will not include empty lines. The resulting\r\n    // paste will preserve the newlines correctly.\r\n    var internalClipboard = editor.getClipboard();\r\n    if (data.isRichText() && internalClipboard) {\r\n      if (\r\n      // If the editorKey is present in the pasted HTML, it should be safe to\r\n      // assume this is an internal paste.\r\n      html.indexOf(editor.getEditorKey()) !== -1 ||\r\n      // The copy may have been made within a single block, in which case the\r\n      // editor key won't be part of the paste. In this case, just check\r\n      // whether the pasted text matches the internal clipboard.\r\n      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\r\n        editor.update(insertFragment(editor._latestEditorState, internalClipboard));\r\n        return;\r\n      }\r\n    } else if (internalClipboard && data.types.includes('com.apple.webarchive') && !data.types.includes('text/html') && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {\r\n      // Safari does not properly store text/html in some cases.\r\n      // Use the internalClipboard if present and equal to what is on\r\n      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\r\n      editor.update(insertFragment(editor._latestEditorState, internalClipboard));\r\n      return;\r\n    }\r\n\r\n    // If there is html paste data, try to parse that.\r\n    if (html) {\r\n      var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);\r\n      if (htmlFragment) {\r\n        var contentBlocks = htmlFragment.contentBlocks,\r\n            entityMap = htmlFragment.entityMap;\r\n\r\n        if (contentBlocks) {\r\n          var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\r\n          editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Otherwise, create a new fragment from our pasted text. Also\r\n    // empty the internal clipboard, since it's no longer valid.\r\n    editor.setClipboard(null);\r\n  }\r\n\r\n  if (textBlocks.length) {\r\n    var character = CharacterMetadata.create({\r\n      style: editorState.getCurrentInlineStyle(),\r\n      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\r\n    });\r\n\r\n    var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\r\n\r\n    var textFragment = DraftPasteProcessor.processText(textBlocks, character, currentBlockType);\r\n\r\n    var textMap = BlockMapBuilder.createFromArray(textFragment);\r\n    editor.update(insertFragment(editor._latestEditorState, textMap));\r\n  }\r\n}\r\n\r\nfunction insertFragment(editorState, fragment, entityMap) {\r\n  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\r\n  // TODO: merge the entity map once we stop using DraftEntity\r\n  // like this:\r\n  // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);\r\n\r\n  return EditorState.push(editorState, newContent.set('entityMap', entityMap), 'insert-fragment');\r\n}\r\n\r\nfunction areTextBlocksAndClipboardEqual(textBlocks, blockMap) {\r\n  return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function (block, ii) {\r\n    return block.getText() === textBlocks[ii];\r\n  });\r\n}\r\n\r\nmodule.exports = editOnPaste;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/draft-js/lib/editOnPaste.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}}],"sources":{"node_modules/draft-js/lib/editOnPaste.js":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnPaste\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nvar BlockMapBuilder = require('./BlockMapBuilder');\r\nvar CharacterMetadata = require('./CharacterMetadata');\r\nvar DataTransfer = require('fbjs/lib/DataTransfer');\r\nvar DraftModifier = require('./DraftModifier');\r\nvar DraftPasteProcessor = require('./DraftPasteProcessor');\r\nvar EditorState = require('./EditorState');\r\nvar RichTextEditorUtil = require('./RichTextEditorUtil');\r\n\r\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\r\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\r\nvar isEventHandled = require('./isEventHandled');\r\nvar splitTextIntoTextBlocks = require('./splitTextIntoTextBlocks');\r\n\r\n/**\r\n * Paste content.\r\n */\r\nfunction editOnPaste(editor, e) {\r\n  e.preventDefault();\r\n  var data = new DataTransfer(e.clipboardData);\r\n\r\n  // Get files, unless this is likely to be a string the user wants inline.\r\n  if (!data.isRichText()) {\r\n    var files = data.getFiles();\r\n    var defaultFileText = data.getText();\r\n    if (files.length > 0) {\r\n      // Allow customized paste handling for images, etc. Otherwise, fall\r\n      // through to insert text contents into the editor.\r\n      if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {\r\n        return;\r\n      }\r\n\r\n      getTextContentFromFiles(files, function ( /*string*/fileText) {\r\n        fileText = fileText || defaultFileText;\r\n        if (!fileText) {\r\n          return;\r\n        }\r\n\r\n        var editorState = editor._latestEditorState;\r\n        var blocks = splitTextIntoTextBlocks(fileText);\r\n        var character = CharacterMetadata.create({\r\n          style: editorState.getCurrentInlineStyle(),\r\n          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\r\n        });\r\n        var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\r\n\r\n        var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);\r\n        var fragment = BlockMapBuilder.createFromArray(text);\r\n\r\n        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\r\n\r\n        editor.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));\r\n      });\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  var textBlocks = [];\r\n  var text = data.getText();\r\n  var html = data.getHTML();\r\n  var editorState = editor._latestEditorState;\r\n\r\n  if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html, editorState))) {\r\n    return;\r\n  }\r\n\r\n  if (text) {\r\n    textBlocks = splitTextIntoTextBlocks(text);\r\n  }\r\n\r\n  if (!editor.props.stripPastedStyles) {\r\n    // If the text from the paste event is rich content that matches what we\r\n    // already have on the internal clipboard, assume that we should just use\r\n    // the clipboard fragment for the paste. This will allow us to preserve\r\n    // styling and entities, if any are present. Note that newlines are\r\n    // stripped during comparison -- this is because copy/paste within the\r\n    // editor in Firefox and IE will not include empty lines. The resulting\r\n    // paste will preserve the newlines correctly.\r\n    var internalClipboard = editor.getClipboard();\r\n    if (data.isRichText() && internalClipboard) {\r\n      if (\r\n      // If the editorKey is present in the pasted HTML, it should be safe to\r\n      // assume this is an internal paste.\r\n      html.indexOf(editor.getEditorKey()) !== -1 ||\r\n      // The copy may have been made within a single block, in which case the\r\n      // editor key won't be part of the paste. In this case, just check\r\n      // whether the pasted text matches the internal clipboard.\r\n      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\r\n        editor.update(insertFragment(editor._latestEditorState, internalClipboard));\r\n        return;\r\n      }\r\n    } else if (internalClipboard && data.types.includes('com.apple.webarchive') && !data.types.includes('text/html') && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {\r\n      // Safari does not properly store text/html in some cases.\r\n      // Use the internalClipboard if present and equal to what is on\r\n      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\r\n      editor.update(insertFragment(editor._latestEditorState, internalClipboard));\r\n      return;\r\n    }\r\n\r\n    // If there is html paste data, try to parse that.\r\n    if (html) {\r\n      var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);\r\n      if (htmlFragment) {\r\n        var contentBlocks = htmlFragment.contentBlocks,\r\n            entityMap = htmlFragment.entityMap;\r\n\r\n        if (contentBlocks) {\r\n          var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\r\n          editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Otherwise, create a new fragment from our pasted text. Also\r\n    // empty the internal clipboard, since it's no longer valid.\r\n    editor.setClipboard(null);\r\n  }\r\n\r\n  if (textBlocks.length) {\r\n    var character = CharacterMetadata.create({\r\n      style: editorState.getCurrentInlineStyle(),\r\n      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\r\n    });\r\n\r\n    var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\r\n\r\n    var textFragment = DraftPasteProcessor.processText(textBlocks, character, currentBlockType);\r\n\r\n    var textMap = BlockMapBuilder.createFromArray(textFragment);\r\n    editor.update(insertFragment(editor._latestEditorState, textMap));\r\n  }\r\n}\r\n\r\nfunction insertFragment(editorState, fragment, entityMap) {\r\n  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\r\n  // TODO: merge the entity map once we stop using DraftEntity\r\n  // like this:\r\n  // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);\r\n\r\n  return EditorState.push(editorState, newContent.set('entityMap', entityMap), 'insert-fragment');\r\n}\r\n\r\nfunction areTextBlocksAndClipboardEqual(textBlocks, blockMap) {\r\n  return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function (block, ii) {\r\n    return block.getText() === textBlocks[ii];\r\n  });\r\n}\r\n\r\nmodule.exports = editOnPaste;"},"lineCount":165}},"error":null,"hash":"bdbc5a85331b74f1a133f352061a19ce","cacheData":{"env":{}}}