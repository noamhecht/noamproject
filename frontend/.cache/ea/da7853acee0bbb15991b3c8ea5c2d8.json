{"id":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","dependencies":[{"name":"C:\\Users\\noamh\\noamproject\\frontend\\package.json","includedInParent":true,"mtime":1590303462313},{"name":"C:\\Users\\noamh\\noamproject\\frontend\\.babelrc","includedInParent":true,"mtime":1590303416264},{"name":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\antd\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1590303444149},{"name":"./_baseIsEqualDeep","loc":{"line":1,"column":30},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\antd\\node_modules\\lodash\\_baseIsEqual.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\antd\\node_modules\\lodash\\_baseIsEqualDeep.js"},{"name":"./isObjectLike","loc":{"line":2,"column":27},"parent":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\antd\\node_modules\\lodash\\_baseIsEqual.js","resolved":"C:\\Users\\noamh\\noamproject\\frontend\\node_modules\\antd\\node_modules\\lodash\\isObjectLike.js"}],"generated":{"js":"var baseIsEqualDeep = require('./_baseIsEqualDeep'),\r\n    isObjectLike = require('./isObjectLike');\r\n\r\n/**\r\n * The base implementation of `_.isEqual` which supports partial comparisons\r\n * and tracks traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @param {boolean} bitmask The bitmask flags.\r\n *  1 - Unordered comparison\r\n *  2 - Partial comparison\r\n * @param {Function} [customizer] The function to customize comparisons.\r\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n */\r\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\r\n  if (value === other) {\r\n    return true;\r\n  }\r\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\r\n    return value !== value && other !== other;\r\n  }\r\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\r\n}\r\n\r\nmodule.exports = baseIsEqual;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/antd/node_modules/lodash/_baseIsEqual.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}}],"sources":{"node_modules/antd/node_modules/lodash/_baseIsEqual.js":"var baseIsEqualDeep = require('./_baseIsEqualDeep'),\r\n    isObjectLike = require('./isObjectLike');\r\n\r\n/**\r\n * The base implementation of `_.isEqual` which supports partial comparisons\r\n * and tracks traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @param {boolean} bitmask The bitmask flags.\r\n *  1 - Unordered comparison\r\n *  2 - Partial comparison\r\n * @param {Function} [customizer] The function to customize comparisons.\r\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n */\r\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\r\n  if (value === other) {\r\n    return true;\r\n  }\r\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\r\n    return value !== value && other !== other;\r\n  }\r\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\r\n}\r\n\r\nmodule.exports = baseIsEqual;\r\n"},"lineCount":29}},"error":null,"hash":"ab06a2a4618a17cf89ef50765b4c71fd","cacheData":{"env":{}}}